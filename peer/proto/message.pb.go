// Copyright (C) 2017, Zipper Team.  All rights reserved.
//
// This file is part of zipper
//
// The zipper is free software: you can use, copy, modify,
// and distribute this software for any purpose with or
// without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// The zipper is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// ISC License for more details.
//
// You should have received a copy of the ISC License
// along with this program.  If not, see <https://opensource.org/licenses/isc>.


// Code generated by protoc-gen-go.
// source: message.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	Header
	Message
	HandShake
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Header struct {
	Magic   uint32 `protobuf:"varint,1,opt,name=magic" json:"magic,omitempty"`
	SeqNum  uint32 `protobuf:"varint,2,opt,name=seqNum" json:"seqNum,omitempty"`
	ProtoID uint32 `protobuf:"varint,3,opt,name=protoID" json:"protoID,omitempty"`
	MsgID   uint32 `protobuf:"varint,4,opt,name=msgID" json:"msgID,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto1.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Header) GetMagic() uint32 {
	if m != nil {
		return m.Magic
	}
	return 0
}

func (m *Header) GetSeqNum() uint32 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

func (m *Header) GetProtoID() uint32 {
	if m != nil {
		return m.ProtoID
	}
	return 0
}

func (m *Header) GetMsgID() uint32 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

type Message struct {
	Header  *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Payload []byte  `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto1.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Message) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type HandShake struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version   string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Id        []byte `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Address   string `protobuf:"bytes,4,opt,name=address" json:"address,omitempty"`
	Type      uint32 `protobuf:"varint,5,opt,name=type" json:"type,omitempty"`
	Signature []byte `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Cert      []byte `protobuf:"bytes,7,opt,name=cert,proto3" json:"cert,omitempty"`
}

func (m *HandShake) Reset()                    { *m = HandShake{} }
func (m *HandShake) String() string            { return proto1.CompactTextString(m) }
func (*HandShake) ProtoMessage()               {}
func (*HandShake) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HandShake) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HandShake) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *HandShake) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *HandShake) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *HandShake) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *HandShake) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *HandShake) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func init() {
	proto1.RegisterType((*Header)(nil), "proto.Header")
	proto1.RegisterType((*Message)(nil), "proto.Message")
	proto1.RegisterType((*HandShake)(nil), "proto.HandShake")
}

func init() { proto1.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8f, 0x41, 0x4e, 0xc3, 0x30,
	0x10, 0x45, 0xd5, 0xd0, 0x24, 0xf2, 0xd0, 0xb0, 0xb0, 0x10, 0xf2, 0x82, 0x05, 0x8a, 0x84, 0xc4,
	0xaa, 0x0b, 0xb8, 0x42, 0x17, 0x2d, 0x12, 0x2c, 0xcc, 0x09, 0x86, 0x7a, 0x48, 0x2d, 0x48, 0x52,
	0xec, 0x14, 0xa9, 0x47, 0xe2, 0x96, 0xc8, 0x3f, 0x89, 0x58, 0x79, 0xde, 0x8c, 0xe7, 0xff, 0x3f,
	0x54, 0xb5, 0x12, 0x23, 0x37, 0xb2, 0x3e, 0x86, 0x7e, 0xe8, 0x75, 0x8e, 0xa7, 0xfe, 0xa0, 0x62,
	0x2b, 0xec, 0x24, 0xe8, 0x6b, 0xca, 0x5b, 0x6e, 0xfc, 0xde, 0x2c, 0xee, 0x16, 0x0f, 0x95, 0x1d,
	0x41, 0xdf, 0x50, 0x11, 0xe5, 0xfb, 0xf5, 0xd4, 0x9a, 0x0c, 0xed, 0x89, 0xb4, 0xa1, 0x12, 0x02,
	0xbb, 0x8d, 0xb9, 0xc0, 0x60, 0x46, 0xe8, 0xc4, 0x66, 0xb7, 0x31, 0xcb, 0x49, 0x27, 0x41, 0xfd,
	0x4c, 0xe5, 0xcb, 0xe8, 0xaf, 0xef, 0xa9, 0x38, 0xc0, 0x12, 0x4e, 0x97, 0x8f, 0xd5, 0x98, 0x68,
	0x3d, 0xe6, 0xb0, 0xd3, 0x10, 0x0e, 0x7c, 0xfe, 0xea, 0xd9, 0xc1, 0x7a, 0x65, 0x67, 0xac, 0x7f,
	0x17, 0xa4, 0xb6, 0xdc, 0xb9, 0xb7, 0x03, 0x7f, 0x8a, 0xd6, 0xb4, 0xec, 0xb8, 0x15, 0x88, 0x29,
	0x8b, 0x3a, 0xed, 0xfe, 0x48, 0x88, 0xbe, 0xef, 0xb0, 0xab, 0xec, 0x8c, 0xfa, 0x8a, 0x32, 0xef,
	0x10, 0x79, 0x65, 0x33, 0xef, 0xd2, 0x4f, 0x76, 0x2e, 0x48, 0x8c, 0xc8, 0xab, 0xec, 0x8c, 0x49,
	0x77, 0x38, 0x1f, 0xc5, 0xe4, 0x38, 0x03, 0xb5, 0xbe, 0x25, 0x15, 0x7d, 0xd3, 0xf1, 0x70, 0x0a,
	0x62, 0x0a, 0x88, 0xfc, 0x37, 0xd2, 0xc6, 0x5e, 0xc2, 0x60, 0x4a, 0x0c, 0x50, 0xbf, 0x17, 0xb8,
	0xed, 0xe9, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xc8, 0xaf, 0x3b, 0x7e, 0x01, 0x00, 0x00,
}
